<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Image Browser.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   -
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL: svn://svn.blueprintit.co.uk/dave/mozilla/firefox/TabSidebar/trunk/src/chrome/global/content/widgets/subpane.xml $
   - $LastChangedBy: dave $
   - $Date: 2006-08-01 14:45:11 +0100 (Tue, 01 Aug 2006) $
   - $Revision: 728 $
   -->
   
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="panel" name="panel">

    <content>
    	<xul:grid flex="1">
    		<xul:columns>
    			<xul:column flex="1"/>
    			<xul:column flex="1"/>
    			<xul:column flex="1"/>
    			<xul:column flex="1"/>
    		</xul:columns>
    		<xul:rows flex="1">
	    		<children/>
	    	</xul:rows>
    	</xul:grid>
    </content>

    <implementation>
    	<field name="_columns">4</field>
    	<field name="_folder">null</field>
    	
    	<method name="_rebuild">
    		<body>
    		<![CDATA[
    			while (this.firstChild)
    			{
    				this.removeChild(this.firstChild);
    			}
    			
    			/*for (var col = 0; col<this._columns; col++)
    			{
    				var column = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "column");
    				column.setAttribute("flex", "1");
    				this.appendChild(column);
    			}*/
    			
					var ios = Components.classes["@mozilla.org/network/io-service;1"]
			                        .getService(Components.interfaces.nsIIOService);
					var mime = Components.classes["@mozilla.org/mime;1"]
					                     .getService(Components.interfaces.nsIMIMEService);
    			var col = 0;
    			var row = null;
    			var entries = this._folder.directoryEntries;
    			while (entries.hasMoreElements())
    			{
    				var file = entries.getNext().QueryInterface(Components.interfaces.nsIFile);
    				try
    				{
							var type = mime.getTypeFromFile(file);
							if (type.substring(0,6) == "image/")
							{
		    				if (col == 0)
		    				{
		    					row = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "row");
		    					this.appendChild(row);
		    				}
		    				var thumbnail = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "thumbnail");
		    				thumbnail.setAttribute("style", "-moz-binding: url(chrome://imagebrowser/content/viewers/thumbnailgrid/panel.xml#thumbnail)");
		    				thumbnail.setAttribute("file", ios.newFileURI(file).spec);
		    				row.appendChild(thumbnail);
		    				col = (col + 1) % this._columns;
		    			}
		    		} catch (e) { }
    			}
    		]]>
    		</body>
    	</method>
    	
    	<method name="setFolder">
    		<parameter name="folder"/>
    		<body>
    			this._folder = folder;
    			this._rebuild();
    		</body>
    	</method>
    </implementation>
    
  </binding>

	<binding id="thumbnail" name="thumbnail">
	
		<content orient="vertical" align="center">
			<xul:vbox width="125" align="center">
				<xul:box width="100" height="100" orient="vertical" align="center" pack="center">
					<xul:image anonid="thumbnail"/>
				</xul:box>
				<xul:label anonid="name" crop="end"/>
			</xul:vbox>
		</content>
		
		<implementation>
			<field name="_file">null</field>
			
			<constructor>
				var ios = Components.classes["@mozilla.org/network/io-service;1"]
		                        .getService(Components.interfaces.nsIIOService);
		    var fph = ios.getProtocolHandler("file")
		                 .QueryInterface(Components.interfaces.nsIFileProtocolHandler);
				this._file = fph.getFileFromURLSpec(this.getAttribute("file"));

				var label = document.getAnonymousElementByAttribute(this, "anonid", "name");
				label.value = this._file.leafName
				var self = this;
				ImageBrowser.loadThumbnailForURI(this.getAttribute("file"), function(uri, width, height) { self.onThumbnailLoaded(uri, width, height) });
			</constructor>
			
			<method name="onThumbnailLoaded">
				<parameter name="uri"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<body>
					var thumbnail = document.getAnonymousElementByAttribute(this, "anonid", "thumbnail");
					thumbnail.src = uri;
					thumbnail.width = width;
					thumbnail.height = height;
				</body>
			</method>
		</implementation>
		
	</binding>
	
</bindings>
