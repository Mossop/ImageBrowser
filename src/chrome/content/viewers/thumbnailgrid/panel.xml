<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Image Browser.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   -
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->
   
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="panel" name="panel">

    <content>
    	<xul:scrollbox anonid="scrollbox" flex="1" orient="vertical" align="stretch">
	    	<xul:grid flex="1">
	    		<xul:columns>
	    			<children includes="column"/>
	    		</xul:columns>
	    		<xul:rows flex="1">
		    		<children/>
		    	</xul:rows>
	    	</xul:grid>
	    </xul:scrollbox>
    </content>

    <implementation implements="nsITimerCallback">

      <field name="_rebuildTimer">null</field>
			<field name="_columns">0</field>
			<field name="_scrollbar">null</field>
			
    	<method name="_rebuild">
    		<body>
    		<![CDATA[
    			while (this.firstChild)
    				this.removeChild(this.firstChild);
    			
   				var scrollbox = document.getAnonymousElementByAttribute(this, "anonid", "scrollbox");
   				var viewwidth = {};

   				if (this._scrollbar)
	   				viewwidth.value = scrollbox.boxObject.width - this._scrollbar;
	   			else
	   				scrollbox.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject).getScrolledSize(viewwidth, {});

					ImageBrowser.logMessage("Width: "+viewwidth.value);
					
   				if (viewwidth.value <= 0)
   				{
   					if (!this._rebuildTimer)
   					{
   						this._rebuildTimer = Components.classes["@mozilla.org/timer;1"]
   						                               .createInstance(Components.interfaces.nsITimer);
   						this._rebuildTimer.initWithCallback(this, 50, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
   					}
   					return;
   				}
   				else if (this._rebuildTimer)
   				{
   					this._rebuildTimer.cancel();
   					this._rebuildTimer = null;
   				}
   				
   				if (!this._scrollbar)
   				{
   					this._scrollbar = scrollbox.boxObject.width - viewwidth.value;
   					ImageBrowser.logMessage("Scrollbar width is "+this._scrollbar);
   				}

    			const XMLNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
					var ios = Components.classes["@mozilla.org/network/io-service;1"]
			                        .getService(Components.interfaces.nsIIOService);
    			
    			var entries = ImageBrowser.getFolderEntries();
    			if (entries.length == 0)
    				return;
    				
    			var column = document.createElementNS(XMLNS, "column");
    			this.appendChild(column);
    			
    			var row = document.createElementNS(XMLNS, "row");
    			this.appendChild(row);
    			
   				var thumbnail = document.createElementNS(XMLNS, "thumbnail");
   				thumbnail.setAttribute("file", ios.newFileURI(entries[0]).spec);
   				row.appendChild(thumbnail);
   				
   				var width = parseInt(window.getComputedStyle(thumbnail, null).width);
   				
   				this._columns = Math.floor(viewwidth.value/width);
    			
    			for (var col = 1; col < this._columns; col++)
    			{
    				column = document.createElementNS(XMLNS, "column");
    				column.setAttribute("flex", "1");
    				this.appendChild(column);

    				column = document.createElementNS(XMLNS, "column");
    				this.appendChild(column);
    			}
    			
    			var col = 1 % this._columns;
    			for (var i=1; i<entries.length; i++)
    			{
    				if (col == 0)
    				{
    					row = document.createElementNS(XMLNS, "row");
    					this.appendChild(row);
    				}
    				else
    				{
    					var box = document.createElementNS(XMLNS, "spacer");
    					row.appendChild(box);
    				}
    				var thumbnail = document.createElementNS(XMLNS, "thumbnail");
    				thumbnail.setAttribute("file", ios.newFileURI(entries[i]).spec);
    				row.appendChild(thumbnail);
    				col = (col + 1) % this._columns;
    			}
    			
    			while (col > 0)
    			{
   					var box = document.createElementNS(XMLNS, "spacer");
   					row.appendChild(box);
   					box = document.createElementNS(XMLNS, "spacer");
   					row.appendChild(box);
    				col = (col + 1) % this._columns;
    			}
    		]]>
    		</body>
    	</method>
    	
    	<method name="onResized">
    		<body>
   				var scrollbox = document.getAnonymousElementByAttribute(this, "anonid", "scrollbox");
   				var viewwidth = {};

   				if (this._scrollbar)
	   				viewwidth.value = scrollbox.boxObject.width - this._scrollbar;
	   			else
	   				scrollbox.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject).getScrolledSize(viewwidth, {});

					if (viewwidth.value >= 0)
					{
	   				var width = parseInt(window.getComputedStyle(this.firstChild.nextSibling.firstChild, null).width);
	   				
	   				var columns = Math.floor(viewwidth.value/width);
	
						if (columns != this._columns)
		    			this._rebuild();
		    	}
    		</body>
    	</method>
    	
    	<method name="onSortChanged">
    		<body>
    			this._rebuild();
    		</body>
    	</method>
    	
    	<method name="onFolderChanged">
    		<body>
    			this._rebuild();
    		</body>
    	</method>

      <method name="notify">
        <parameter name="timer"/>
        <body>
          if (timer == this._rebuildTimer)
            this._rebuild();
        </body>
      </method>
    </implementation>
    
  </binding>

	<binding id="thumbnail" name="thumbnail">
	
		<content orient="vertical" align="center">
			<xul:button orient="vertical" align="center">
				<xul:vbox anonid="container" align="stretch">
					<xul:vbox align="center">
						<xul:stack>
							<xul:image anonid="thumbnail" top="0" left="0"/>
							<xul:image anonid="icon" top="0" left="0"/>
						</xul:stack>
					</xul:vbox>
					<xul:label anonid="name" style="text-align: center" crop="end"/>
				</xul:vbox>
			</xul:button>
		</content>
		
		<implementation>
			<field name="_file">null</field>
			
			<constructor>
				var ios = Components.classes["@mozilla.org/network/io-service;1"]
		                        .getService(Components.interfaces.nsIIOService);
		    var fph = ios.getProtocolHandler("file")
		                 .QueryInterface(Components.interfaces.nsIFileProtocolHandler);
				this._file = fph.getFileFromURLSpec(this.getAttribute("file"));

				var icon = document.getAnonymousElementByAttribute(this, "anonid", "icon");
				icon.src = "moz-icon"+this.getAttribute("file").substr(4);
				var label = document.getAnonymousElementByAttribute(this, "anonid", "name");
				label.value = this._file.leafName
				var size = ImageBrowser.getThumbnailSize();
				var box = document.getAnonymousElementByAttribute(this, "anonid", "thumbnail").parentNode;
				box.width = size;
				box.parentNode.parentNode.width = size+10;

				ProgressHandler.addOperation(1);
				var self = this;
				ImageBrowser.loadThumbnailForFile(this._file, ImageBrowser.getThumbnailSize(), function(uri, width, height) { self.onThumbnailLoaded(uri, width, height) });
			</constructor>
			
			<method name="onThumbnailLoaded">
				<parameter name="uri"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<body>
				<![CDATA[
					if (this.parentNode && this.parentNode.parentNode)
					{
						var size = ImageBrowser.getThumbnailSize();
						var thumbnail = document.getAnonymousElementByAttribute(this, "anonid", "thumbnail");
						thumbnail.width = width;
						thumbnail.height = height;
						thumbnail.setAttribute("left", Math.floor((size - width) / 2));
						thumbnail.setAttribute("top", Math.floor((size - height) / 2));
						thumbnail.src = uri;
						ProgressHandler.completeOperation(1);
					}
				]]>
				</body>
			</method>
		</implementation>
		
	</binding>
	
</bindings>
